<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 0  -->
  <question type="category">
    <category>
      <text>$course$/top/Standard für MO</text>
    </category>
    <info format="moodle_auto_format">
      <text></text>
    </info>
    <idnumber></idnumber>
  </question>

<!-- question: 0  -->
  <question type="category">
    <category>
      <text>$course$/top/Standard für MO/Meclib tutorial</text>
    </category>
    <info format="moodle_auto_format">
      <text></text>
    </info>
    <idnumber></idnumber>
  </question>

<!-- question: 44492  -->
  <question type="stack">
    <name>
      <text>MK: Meclib workshop P1 Minimum version</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>[[input:S_Ha]] [[validation:S_Ha]] [[feedback:Ha]]</p>]]></text>
    </questiontext>
    <generalfeedback format="markdown">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.1000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2024012900</text>
    </stackversion>
    <questionvariables>
      <text></text>
    </questionvariables>
    <specificfeedback format="markdown">
      <text></text>
    </specificfeedback>
    <questionnote format="html">
      <text></text>
    </questionnote>
    <questiondescription format="html">
      <text></text>
    </questiondescription>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="markdown">
      <text>Correct answer, well done.</text>
    </prtcorrect>
    <prtpartiallycorrect format="markdown">
      <text>Your answer is partially correct.</text>
    </prtpartiallycorrect>
    <prtincorrect format="markdown">
      <text>Incorrect answer.</text>
    </prtincorrect>
    <decimals>.</decimals>
    <scientificnotation>*10</scientificnotation>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>S_Ha</name>
      <type>algebraic</type>
      <tans>Ha</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>expression</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>1</showvalidation>
      <options></options>
    </input>
    <prt>
      <name>Ha</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>AlgEquiv</answertest>
        <sans>S_Ha</sans>
        <tans>Ha</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>Ha-1-T</trueanswernote>
        <truefeedback format="markdown">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>Ha-1-F</falseanswernote>
        <falsefeedback format="markdown">
          <text></text>
        </falsefeedback>
      </node>
    </prt>
  </question>

<!-- question: 44493  -->
  <question type="stack">
    <name>
      <text>MK: Meclib workshop P1b Extended version</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Give the general formula for the length of the hypotenuse \(c\) of a right-angled triangle with sides \(a\) and \(b\).</p>

<p>[[input:S_Ha]] [[validation:S_Ha]] [[feedback:Ha]]</p>]]></text>
<file name="31330603739004493_image.png" path="/" encoding="base64"></file>
    </questiontext>
    <generalfeedback format="markdown">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.1000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2024012900</text>
    </stackversion>
    <questionvariables>
      <text>Ha: sqrt(a^2+b^2);</text>
    </questionvariables>
    <specificfeedback format="markdown">
      <text></text>
    </specificfeedback>
    <questionnote format="html">
      <text></text>
    </questionnote>
    <questiondescription format="html">
      <text></text>
    </questiondescription>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="markdown">
      <text>Correct answer, well done.</text>
    </prtcorrect>
    <prtpartiallycorrect format="markdown">
      <text>Your answer is partially correct.</text>
    </prtpartiallycorrect>
    <prtincorrect format="markdown">
      <text>Incorrect answer.</text>
    </prtincorrect>
    <decimals>.</decimals>
    <scientificnotation>*10</scientificnotation>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>S_Ha</name>
      <type>algebraic</type>
      <tans>Ha</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>expression</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options></options>
    </input>
    <prt>
      <name>Ha</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>AlgEquiv</answertest>
        <sans>S_Ha</sans>
        <tans>Ha</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>Ha-1-T</trueanswernote>
        <truefeedback format="markdown">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>Ha-1-F</falseanswernote>
        <falsefeedback format="markdown">
          <text></text>
        </falsefeedback>
      </node>
    </prt>
  </question>

<!-- question: 44505  -->
  <question type="stack">
    <name>
      <text>MK: Meclib workshop P2 Meclib image</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Give the general formula for the length of the hypotenuse \(c\) of a right-angled triangle with sides \(a\) and \(b\).</p>

[[lang code="de"]] [[/lang]][[lang code="other"]] [[/lang]]
<div style="float:right">
[[jsxgraph width='250px' height='250px' ]] 
var mode  = "STACK";  // as opposed to "jsfiddle" which is used in the test environment
var stateRef;         // is empty in the non-interactive case
const initstring = {#init#}; // injection of the list of objects
var decsep = {#stackfltsep#};  // injection of the decimal separator setting
const centeredLabelStyle = {size:0, showInfobox:false, label:{offset:[-6,0], 
  anchorX:'left', anchorY:'middle'}};
// End of STACK header
[[include src="https://raw.githubusercontent.com/mkraska/meclib/main/meclib.js" /]]
[[/jsxgraph]]</div>

<p>[[input:S_Ha]] [[validation:S_Ha]] [[feedback:Ha]]</p>]]></text>
    </questiontext>
    <generalfeedback format="markdown">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.1000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2025040100</text>
    </stackversion>
    <questionvariables>
      <text><![CDATA[Ha: sqrt(a^2+b^2);

aa:4; bb: 3;
pB: [0,0]; pC: [aa,0]; pA: [aa,bb];

initdata: [
  [ "grid", "","", -1,aa+1,-1,bb+1, 40 ],
  [ "polygon", "", pA, pB, pC ],
  [ "label", "\\(a\\)", (pB+pC)/2 +[ 0,-0.4] ],
  [ "label", "\\(b\\)", (pA+pC)/2 +[0.2,0] ],
  [ "label", "\\(c\\)", (pA+pB)/2 +[-0.4,0.4] ]
];
init: stackjson_stringify(initdata);]]></text>
    </questionvariables>
    <specificfeedback format="markdown">
      <text></text>
    </specificfeedback>
    <questionnote format="html">
      <text></text>
    </questionnote>
    <questiondescription format="html">
      <text></text>
    </questiondescription>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="markdown">
      <text>Correct answer, well done.</text>
    </prtcorrect>
    <prtpartiallycorrect format="markdown">
      <text>Your answer is partially correct.</text>
    </prtpartiallycorrect>
    <prtincorrect format="markdown">
      <text>Incorrect answer.</text>
    </prtincorrect>
    <decimals>.</decimals>
    <scientificnotation>*10</scientificnotation>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>S_Ha</name>
      <type>algebraic</type>
      <tans>Ha</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>expression</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options></options>
    </input>
    <prt>
      <name>Ha</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>AlgEquiv</answertest>
        <sans>S_Ha</sans>
        <tans>Ha</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>Ha-1-T</trueanswernote>
        <truefeedback format="markdown">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>Ha-1-F</falseanswernote>
        <falsefeedback format="markdown">
          <text></text>
        </falsefeedback>
      </node>
    </prt>
  </question>

<!-- question: 44506  -->
  <question type="stack">
    <name>
      <text>MK: Meclib workshop P3 Randomization</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Give the general formula for the length of the hypotenuse \(c\) of a right-angled triangle with sides \(a\) and \(b\).</p>

[[lang code="de"]] [[/lang]][[lang code="other"]] [[/lang]]
<div style="float:right">
[[jsxgraph width='250px' height='250px' ]] 
var mode  = "STACK";  // as opposed to "jsfiddle" which is used in the test environment
var stateRef;         // is empty in the non-interactive case
const initstring = {#init#}; // injection of the list of objects
var decsep = {#stackfltsep#};  // injection of the decimal separator setting
const centeredLabelStyle = {size:0, showInfobox:false, label:{offset:[-6,0], 
  anchorX:'left', anchorY:'middle'}};
// End of STACK header
[[include src="https://raw.githubusercontent.com/mkraska/meclib/main/meclib.js" /]]
[[/jsxgraph]]</div>


<p>[[input:S_Ha]] [[validation:S_Ha]] [[feedback:Ha]]</p>]]></text>
    </questiontext>
    <generalfeedback format="markdown">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.1000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2025040100</text>
    </stackversion>
    <questionvariables>
      <text><![CDATA[Ha: sqrt(a^2+b^2);

aa:4; bb: 3;
[aa,bb]: rand([ [1,4], [1,3], [2,4], [2,3], [2,2], [3,3], [3,2], [3,1], [4,2], [4,1] ]);

pB: [0,0]; pC: [aa,0]; pA: [aa,bb];

initdata: [
  [ "grid", "","", -1,aa+1,-1,bb+1, 40 ],
  [ "polygon", "", pA, pB, pC ],
  [ "label", "\\(a\\)", (pB+pC)/2 +[ 0,-0.4] ],
  [ "label", "\\(b\\)", (pA+pC)/2 +[0.2,0] ],
  [ "label", "\\(c\\)", (pA+pB)/2 +[-0.4,0.4] ]
];
init: stackjson_stringify(initdata);]]></text>
    </questionvariables>
    <specificfeedback format="markdown">
      <text></text>
    </specificfeedback>
    <questionnote format="html">
      <text>{@'a=aa@}, {@'b=bb@}</text>
    </questionnote>
    <questiondescription format="html">
      <text></text>
    </questiondescription>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="markdown">
      <text>Correct answer, well done.</text>
    </prtcorrect>
    <prtpartiallycorrect format="markdown">
      <text>Your answer is partially correct.</text>
    </prtpartiallycorrect>
    <prtincorrect format="markdown">
      <text>Incorrect answer.</text>
    </prtincorrect>
    <decimals>.</decimals>
    <scientificnotation>*10</scientificnotation>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>S_Ha</name>
      <type>algebraic</type>
      <tans>Ha</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>expression</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options></options>
    </input>
    <prt>
      <name>Ha</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>AlgEquiv</answertest>
        <sans>S_Ha</sans>
        <tans>Ha</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>Ha-1-T</trueanswernote>
        <truefeedback format="markdown">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>Ha-1-F</falseanswernote>
        <falsefeedback format="markdown">
          <text></text>
        </falsefeedback>
      </node>
    </prt>
  </question>

<!-- question: 44507  -->
  <question type="stack">
    <name>
      <text>MK: Meclib workshop P4 Input 2</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Give the general formula for the length of the hypotenuse \(c\) of a right-angled triangle with sides \(a\) and \(b\).</p>

[[lang code="de"]] [[/lang]][[lang code="other"]] [[/lang]]
<div style="float:right">
[[jsxgraph width='250px' height='250px' ]] 
var mode  = "STACK";  // as opposed to "jsfiddle" which is used in the test environment
var stateRef;         // is empty in the non-interactive case
const initstring = {#init#}; // injection of the list of objects
var decsep = {#stackfltsep#};  // injection of the decimal separator setting
const centeredLabelStyle = {size:0, showInfobox:false, label:{offset:[-6,0], 
  anchorX:'left', anchorY:'middle'}};
// End of STACK header
[[include src="https://raw.githubusercontent.com/mkraska/meclib/main/meclib.js" /]]
[[/jsxgraph]]</div>


<p>[[input:S_Ha]] [[validation:S_Ha]] [[feedback:Ha]]</p>

<p>What is the exact length of the hypotenuse if the grid width is \(L\)?
<p>[[input:S_H]] [[validation:S_H]] [[feedback:H]]</p>]]></text>
    </questiontext>
    <generalfeedback format="markdown">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.1000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2025040100</text>
    </stackversion>
    <questionvariables>
      <text><![CDATA[Ha: sqrt(a^2+b^2);

aa:4; bb: 3;
[aa,bb]: rand([ [1,4], [1,3], [2,4], [2,3], [2,2], [3,3], [3,2], [3,1], [4,2], [4,1] ]);

H: sqrt(aa^2+bb^2)*L;
Hnum: float(sqrt(aa^2+bb^2));

pB: [0,0]; pC: [aa,0]; pA: [aa,bb];

initdata: [
  [ "grid", "","", -1,aa+1,-1,bb+1, 40 ],
  [ "polygon", "", pA, pB, pC ],
  [ "label", "\\(a\\)", (pB+pC)/2 +[ 0,-0.4] ],
  [ "label", "\\(b\\)", (pA+pC)/2 +[0.2,0] ],
  [ "label", "\\(c\\)", (pA+pB)/2 +[-0.4,0.4] ]
];
init: stackjson_stringify(initdata);]]></text>
    </questionvariables>
    <specificfeedback format="markdown">
      <text></text>
    </specificfeedback>
    <questionnote format="html">
      <text>{@'a=aa@}, {@'b=bb@}</text>
    </questionnote>
    <questiondescription format="html">
      <text></text>
    </questiondescription>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="markdown">
      <text>Correct answer, well done.</text>
    </prtcorrect>
    <prtpartiallycorrect format="markdown">
      <text>Your answer is partially correct.</text>
    </prtpartiallycorrect>
    <prtincorrect format="markdown">
      <text>Incorrect answer.</text>
    </prtincorrect>
    <decimals>.</decimals>
    <scientificnotation>*10</scientificnotation>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>S_H</name>
      <type>algebraic</type>
      <tans>H</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>expression</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options></options>
    </input>
    <input>
      <name>S_Ha</name>
      <type>algebraic</type>
      <tans>Ha</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>expression</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options></options>
    </input>
    <prt>
      <name>H</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>AlgEquiv</answertest>
        <sans>S_H</sans>
        <tans>H</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>H-1-T</trueanswernote>
        <truefeedback format="markdown">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>H-1-F</falseanswernote>
        <falsefeedback format="markdown">
          <text></text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>Ha</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>AlgEquiv</answertest>
        <sans>S_Ha</sans>
        <tans>Ha</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>Ha-1-T</trueanswernote>
        <truefeedback format="markdown">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>Ha-1-F</falseanswernote>
        <falsefeedback format="markdown">
          <text></text>
        </falsefeedback>
      </node>
    </prt>
  </question>

<!-- question: 44508  -->
  <question type="stack">
    <name>
      <text>MK: Meclib workshop P5 Input 3</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Give the general formula for the length of the hypotenuse \(c\) of a right-angled triangle with sides \(a\) and \(b\).</p>

[[lang code="de"]] [[/lang]][[lang code="other"]] [[/lang]]
<div style="float:right">
[[jsxgraph width='250px' height='250px' ]] 
var mode  = "STACK";  // as opposed to "jsfiddle" which is used in the test environment
var stateRef;         // is empty in the non-interactive case
const initstring = {#init#}; // injection of the list of objects
var decsep = {#stackfltsep#};  // injection of the decimal separator setting
const centeredLabelStyle = {size:0, showInfobox:false, label:{offset:[-6,0], 
  anchorX:'left', anchorY:'middle'}};
// End of STACK header
[[include src="https://raw.githubusercontent.com/mkraska/meclib/main/meclib.js" /]]
[[/jsxgraph]]</div>

<p>[[input:S_Ha]] [[validation:S_Ha]] [[feedback:Ha]]</p>

<p>What is the exact length of the hypotenuse if the grid width is \(L\)?
<p>[[input:S_H]] [[validation:S_H]] [[feedback:H]]</p>

<p>What is the length of the hypotenuse if the grid width is \(1\,\rm{cm}\)?
<p>[[input:S_Hnum]] [[validation:S_Hnum]] [[feedback:Hnum]]</p>]]></text>
    </questiontext>
    <generalfeedback format="markdown">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.1000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2025040100</text>
    </stackversion>
    <questionvariables>
      <text><![CDATA[Ha: sqrt(a^2+b^2);

aa:4; bb: 3;
[aa,bb]: rand([ [1,4], [1,3], [2,4], [2,3], [2,2], [3,3], [3,2], [3,1], [4,2], [4,1] ]);

H: sqrt(aa^2+bb^2)*L;
Hnum: float(sqrt(aa^2+bb^2));

pB: [0,0]; pC: [aa,0]; pA: [aa,bb];

initdata: [
  [ "grid", "","", -1,aa+1,-1,bb+1, 40 ],
  [ "polygon", "", pA, pB, pC ],
  [ "label", "\\(a\\)", (pB+pC)/2 +[ 0,-0.4] ],
  [ "label", "\\(b\\)", (pA+pC)/2 +[0.2,0] ],
  [ "label", "\\(c\\)", (pA+pB)/2 +[-0.4,0.4] ]
];
init: stackjson_stringify(initdata);]]></text>
    </questionvariables>
    <specificfeedback format="markdown">
      <text></text>
    </specificfeedback>
    <questionnote format="html">
      <text>{@'a=aa@}, {@'b=bb@}</text>
    </questionnote>
    <questiondescription format="html">
      <text></text>
    </questiondescription>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="markdown">
      <text>Correct answer, well done.</text>
    </prtcorrect>
    <prtpartiallycorrect format="markdown">
      <text>Your answer is partially correct.</text>
    </prtpartiallycorrect>
    <prtincorrect format="markdown">
      <text>Incorrect answer.</text>
    </prtincorrect>
    <decimals>.</decimals>
    <scientificnotation>*10</scientificnotation>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>S_H</name>
      <type>algebraic</type>
      <tans>H</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>expression</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options>nounits</options>
    </input>
    <input>
      <name>S_Ha</name>
      <type>algebraic</type>
      <tans>Ha</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>expression</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options>nounits</options>
    </input>
    <input>
      <name>S_Hnum</name>
      <type>units</type>
      <tans>Hnum*cm</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>number with unit</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords>+,-,sqrt</forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options></options>
    </input>
    <prt>
      <name>H</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>AlgEquiv</answertest>
        <sans>S_H</sans>
        <tans>H</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>H-1-T</trueanswernote>
        <truefeedback format="markdown">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>H-1-F</falseanswernote>
        <falsefeedback format="markdown">
          <text></text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>Ha</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>AlgEquiv</answertest>
        <sans>S_Ha</sans>
        <tans>Ha</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>Ha-1-T</trueanswernote>
        <truefeedback format="markdown">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>Ha-1-F</falseanswernote>
        <falsefeedback format="markdown">
          <text></text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>Hnum</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>UnitsRelative</answertest>
        <sans>S_Hnum</sans>
        <tans>Hnum*cm</tans>
        <testoptions>0.05</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>Hnum-1-T</trueanswernote>
        <truefeedback format="markdown">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>Hnum-1-F</falseanswernote>
        <falsefeedback format="markdown">
          <text></text>
        </falsefeedback>
      </node>
    </prt>
  </question>

<!-- question: 44509  -->
  <question type="stack">
    <name>
      <text>MK: Meclib workshop P6 Feedback on unit input</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Give the general formula for the length of the hypotenuse \(c\) of a right-angled triangle with sides \(a\) and \(b\).</p>

[[lang code="de"]] [[/lang]][[lang code="other"]] [[/lang]]
<div style="float:right">
[[jsxgraph width='250px' height='250px' ]] 
var mode  = "STACK";  // as opposed to "jsfiddle" which is used in the test environment
var stateRef;         // is empty in the non-interactive case
const initstring = {#init#}; // injection of the list of objects
var decsep = {#stackfltsep#};  // injection of the decimal separator setting
const centeredLabelStyle = {size:0, showInfobox:false, label:{offset:[-6,0], 
  anchorX:'left', anchorY:'middle'}};
// End of STACK header
[[include src="https://raw.githubusercontent.com/mkraska/meclib/main/meclib.js" /]]
[[/jsxgraph]]</div>


<p>[[input:S_Ha]] [[validation:S_Ha]] [[feedback:Ha]]</p>

<p>What is the exact length of the hypotenuse if the grid width is \(L\)?
<p>[[input:S_H]] [[validation:S_H]] [[feedback:H]]</p>

<p>What is the length of the hypotenuse if the grid width is \(1\,\rm{cm}\)?
<p>[[input:S_Hnum]] [[validation:S_Hnum]] [[feedback:Hnum]]</p>]]></text>
    </questiontext>
    <generalfeedback format="markdown">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.1000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2025040100</text>
    </stackversion>
    <questionvariables>
      <text><![CDATA[Ha: sqrt(a^2+b^2);

aa:4; bb: 3;
[aa,bb]: rand([ [1,4], [1,3], [2,4], [2,3], [2,2], [3,3], [3,2], [3,1], [4,2], [4,1] ]);

H: sqrt(aa^2+bb^2)*L;
Hnum: float(sqrt(aa^2+bb^2));

pB: [0,0]; pC: [aa,0]; pA: [aa,bb];

initdata: [
  [ "grid", "","", -1,aa+1,-1,bb+1, 40 ],
  [ "polygon", "", pA, pB, pC ],
  [ "label", "\\(a\\)", (pB+pC)/2 +[ 0,-0.4] ],
  [ "label", "\\(b\\)", (pA+pC)/2 +[0.2,0] ],
  [ "label", "\\(c\\)", (pA+pB)/2 +[-0.4,0.4] ]
];
init: stackjson_stringify(initdata);

stack_include("https://raw.githubusercontent.com/mkraska/meclib/main/Maxima/fb_value_EN.mac");]]></text>
    </questionvariables>
    <specificfeedback format="markdown">
      <text></text>
    </specificfeedback>
    <questionnote format="html">
      <text>{@'a=aa@}, {@'b=bb@}</text>
    </questionnote>
    <questiondescription format="html">
      <text></text>
    </questiondescription>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="markdown">
      <text>Correct answer, well done.</text>
    </prtcorrect>
    <prtpartiallycorrect format="markdown">
      <text>Your answer is partially correct.</text>
    </prtpartiallycorrect>
    <prtincorrect format="markdown">
      <text>Incorrect answer.</text>
    </prtincorrect>
    <decimals>.</decimals>
    <scientificnotation>*10</scientificnotation>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>S_H</name>
      <type>algebraic</type>
      <tans>H</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>expression</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options>nounits</options>
    </input>
    <input>
      <name>S_Ha</name>
      <type>algebraic</type>
      <tans>Ha</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>expression</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options>nounits</options>
    </input>
    <input>
      <name>S_Hnum</name>
      <type>units</type>
      <tans>Hnum*cm</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>number with unit</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords>+,-,sqrt</forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options></options>
    </input>
    <prt>
      <name>H</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>AlgEquiv</answertest>
        <sans>S_H</sans>
        <tans>H</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>H-1-T</trueanswernote>
        <truefeedback format="html">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>H-1-F</falseanswernote>
        <falsefeedback format="html">
          <text>{@fb_vars(S_H,H)@}</text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>Ha</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>AlgEquiv</answertest>
        <sans>S_Ha</sans>
        <tans>Ha</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>Ha-1-T</trueanswernote>
        <truefeedback format="html">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>Ha-1-F</falseanswernote>
        <falsefeedback format="html">
          <text>{@fb_vars(S_Ha,Ha)@}</text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>Hnum</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>UnitsRelative</answertest>
        <sans>S_Hnum</sans>
        <tans>Hnum*cm</tans>
        <testoptions>0.05</testoptions>
        <quiet>1</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>Hnum-1-T</trueanswernote>
        <truefeedback format="html">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>Hnum-1-F</falseanswernote>
        <falsefeedback format="html">
          <text>{@fb_unit(S_Hnum, Hnum*cm, 0.05)@}</text>
        </falsefeedback>
      </node>
    </prt>
  </question>

<!-- question: 44513  -->
  <question type="stack">
    <name>
      <text>MK: Meclib workshop P7 Interactive Input</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Give the general formula for the length of the hypotenuse \(c\) of a right-angled triangle with sides \(a\) and \(b\).</p>

<p hidden>[[input:objects]] [[validation:objects]]</p>
<p hidden>[[input:names]] [[validation:names]] </p>
<div style="float:right">
[[jsxgraph width='500px' height='400px' input-ref-objects="stateRef" input-ref-names="fbd_names" ]]
var mode  = "STACK";
const initstring = {#init#};
const centeredLabelStyle = {size:0, showInfobox:false, label:{offset:[-6,0], 
  anchorX:'left', anchorY:'middle'}};
// End of STACK header
[[include src="https://raw.githubusercontent.com/mkraska/meclib/main/meclib.js" /]]
[[/jsxgraph]]</div>

<p>[[input:S_Ha]] [[validation:S_Ha]] [[feedback:Ha]]</p>

<p>What is the exact length of the hypotenuse if the grid width is \(L\)?
<p>[[input:S_H]] [[validation:S_H]] [[feedback:H]]</p>

<p>What is the length of the hypotenuse if the grid width is \(1\,\rm{cm}\)?
<p>[[input:S_Hnum]] [[validation:S_Hnum]] [[feedback:Hnum]]</p>

<p>Indicate the center of gravity using the blue crosshair.</p>
<p>[[feedback:CG]]</p>]]></text>
    </questiontext>
    <generalfeedback format="markdown">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.1000000</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2025040100</text>
    </stackversion>
    <questionvariables>
      <text><![CDATA[Ha: sqrt(a^2+b^2);

aa:4; bb: 3;
[aa,bb]: rand([ [1,4], [1,3], [2,4], [2,3], [2,2], [3,3], [3,2], [3,1], [4,2], [4,1] ]);

H: sqrt(aa^2+bb^2)*L;
Hnum: float(sqrt(aa^2+bb^2));

pB: [0,0]; pC: [aa,0]; pA: [aa,bb];

initdata: [
  [ "grid", "","", -1,aa+1,-1,bb+1, 40 ],
  [ "crosshair", "", [0, bb], [0,0], [1,1], [2,2] ],
  [ "polygon", "", pA, pB, pC ],
  [ "label", "\\(a\\)", (pB+pC)/2 +[ 0,-0.4] ],
  [ "label", "\\(b\\)", (pA+pC)/2 +[0.2,0] ],
  [ "label", "\\(c\\)", (pA+pB)/2 +[-0.4,0.4] ]
];
init: stackjson_stringify(initdata);
ic: 2;
CG: [2/3*aa, 1/3*bb];

tansdata: initdata;
tansdata[ic][3]: CG;
tans: stackjson_stringify(tansdata);

stack_include("https://raw.githubusercontent.com/mkraska/meclib/main/Maxima/fb_value_EN.mac");]]></text>
    </questionvariables>
    <specificfeedback format="markdown">
      <text></text>
    </specificfeedback>
    <questionnote format="html">
      <text>{@'a=aa@}, {@'b=bb@}</text>
    </questionnote>
    <questiondescription format="html">
      <text></text>
    </questiondescription>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="markdown">
      <text>Correct answer, well done.</text>
    </prtcorrect>
    <prtpartiallycorrect format="markdown">
      <text>Your answer is partially correct.</text>
    </prtpartiallycorrect>
    <prtincorrect format="markdown">
      <text>Incorrect answer.</text>
    </prtincorrect>
    <decimals>,</decimals>
    <scientificnotation>*10</scientificnotation>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>names</name>
      <type>algebraic</type>
      <tans>[]</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>0</mustverify>
      <showvalidation>0</showvalidation>
      <options></options>
    </input>
    <input>
      <name>objects</name>
      <type>string</type>
      <tans>tans</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>0</mustverify>
      <showvalidation>0</showvalidation>
      <options></options>
    </input>
    <input>
      <name>S_H</name>
      <type>algebraic</type>
      <tans>H</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>expression</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options>nounits</options>
    </input>
    <input>
      <name>S_Ha</name>
      <type>algebraic</type>
      <tans>Ha</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>expression</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options>nounits</options>
    </input>
    <input>
      <name>S_Hnum</name>
      <type>units</type>
      <tans>Hnum*cm</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>3</insertstars>
      <syntaxhint>number with unit</syntaxhint>
      <syntaxattribute>1</syntaxattribute>
      <forbidwords>+,-,sqrt</forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options></options>
    </input>
    <prt>
      <name>CG</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text>S_CG: names[ic];
vec: CG-S_CG;
dist: sqrt(vec[1]^2+vec[2]^2);</text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>NumAbsolute</answertest>
        <sans>dist</sans>
        <tans>0</tans>
        <testoptions>0.05</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>CG-1-T</trueanswernote>
        <truefeedback format="html">
          <text>The distance to the actual CG is {@dispdp(dist,2)@} grid units.</text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>CG-1-F</falseanswernote>
        <falsefeedback format="html">
          <text>The distance to the actual CG is {@dispdp(dist,2)@} grid units. Must be smaller than {@0.05@}.</text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>H</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>AlgEquiv</answertest>
        <sans>S_H</sans>
        <tans>H</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>H-1-T</trueanswernote>
        <truefeedback format="html">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>H-1-F</falseanswernote>
        <falsefeedback format="html">
          <text>{@fb_vars(S_H,H)@}</text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>Ha</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>AlgEquiv</answertest>
        <sans>S_Ha</sans>
        <tans>Ha</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>Ha-1-T</trueanswernote>
        <truefeedback format="html">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>Ha-1-F</falseanswernote>
        <falsefeedback format="html">
          <text>{@fb_vars(S_Ha,Ha)@}</text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>Hnum</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>2</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description></description>
        <answertest>UnitsRelative</answertest>
        <sans>S_Hnum</sans>
        <tans>Hnum*cm</tans>
        <testoptions>0.05</testoptions>
        <quiet>1</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>Hnum-1-T</trueanswernote>
        <truefeedback format="html">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>Hnum-1-F</falseanswernote>
        <falsefeedback format="html">
          <text>{@fb_unit(S_Hnum, Hnum*cm, 0.05)@}</text>
        </falsefeedback>
      </node>
    </prt>
  </question>

</quiz>